{"version":3,"file":"static/js/571.35f8d62a.chunk.js","mappings":"ocASaA,EAAc,SAAHC,GAAqB,IAAfC,EAAOD,EAAPC,QAC1BC,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,EAAqBP,EAArBO,GAAIC,EAAiBR,EAAjBQ,KAAMC,EAAWT,EAAXS,OACZC,GAAWC,EAAAA,EAAAA,MAOjB,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAUC,GAAIC,EAAAA,cAAeC,iBAClCJ,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CAACC,QAAS,kBAPNC,EAO0BZ,EAN7CD,GAAQ,QACRI,GAASU,EAAAA,EAAAA,IAAgBD,IAFP,IAACA,CAO6B,EAAE,aAAW,SAAQE,SAC5DhB,GAAOO,EAAAA,EAAAA,KAACU,EAAAA,GAAS,KAAKV,EAAAA,EAAAA,KAACW,EAAAA,EAAU,MACxBF,UACdT,EAAAA,EAAAA,KAACY,EAAAA,EAAc,CAAAH,UACXI,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CAAAL,SAAA,CAAEb,EAAK,KAAGC,QALhBF,EASvB,E,UChBaoB,EAAe,WACxB,IAAMjB,GAAWC,EAAAA,EAAAA,MACjBV,GAAwBC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdyB,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAkBF,EAAAA,EAAAA,IAAYG,EAAAA,KAEpCC,EAAAA,EAAAA,YAAU,WACN3B,GAAQ,EACZ,GAAG,KAEH2B,EAAAA,EAAAA,YAAU,WACNvB,GAASwB,EAAAA,EAAAA,MACb,GAAG,CAACxB,IAEJ,IAAMyB,EAAcJ,EAAgBK,cAAcC,OAC5CC,EAAkBV,EAAUW,QAAO,SAAAxC,GAAO,OAAAA,EAAJS,KAClC4B,cAAcI,SAASL,EAAY,IAE7C,OACIV,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAC3B,GAAI4B,EAAAA,aAAarB,SAAA,EAClBT,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAAC7B,GAAI8B,EAAAA,GAAYvB,UACpBT,EAAAA,EAAAA,KAACiC,EAAAA,EAAkB,OAEvBjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAACC,UAAU,KAAKC,QAAQ,KAAI3B,SAAC,kBAGvChB,IAAQO,EAAAA,EAAAA,KAACqC,EAAAA,GAAM,KAChBrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACpC,GAAI,CAAEqC,MAAO,KAAM9B,SACpBiB,EAAgBc,KAAI,SAACpD,GAAO,OACzBY,EAAAA,EAAAA,KAACd,EAAW,CAACE,QAASA,GAAcA,EAAQO,GAAM,QAKtE,E,8BCvCa8C,EAAS,WAClB,IAAM3C,GAAWC,EAAAA,EAAAA,MACXoB,GAAkBF,EAAAA,EAAAA,IAAYG,EAAAA,IAOpC,OACIP,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAACM,UAAU,MAAMjC,GAAIwC,EAAAA,eAAejC,SAAA,EACpCT,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAAC7B,GAAI8B,EAAAA,GAAYvB,UACpBT,EAAAA,EAAAA,KAAC2C,EAAAA,EAAgB,OAErB3C,EAAAA,EAAAA,KAAC4C,EAAAA,EAAS,CACNC,OAAO,SACPC,WAAY,CAAEC,UAAW,OAAQC,QAAS,qHAC1C9C,GAAI,CACAqC,MAAO,IACPU,QAAS,8BAEbC,MAAM,yBACNC,KAAK,OACLvD,KAAK,SACLwD,MAAOjC,EACPkC,MAAM,iBACNC,SAtBW,SAACC,GACpB,IAAQH,EAAUG,EAAMC,cAAhBJ,MACRtD,GAAS2D,EAAAA,EAAAA,IAAUL,GACvB,MAuBJ,E,UCjCaM,EAAQ,WACjB,IAAMC,GAAQ1C,EAAAA,EAAAA,IAAY2C,EAAAA,IAE1B,OACI5D,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC3B,GAAI2D,EAAAA,cAAcpD,UACnBI,EAAAA,EAAAA,MAACqB,EAAAA,EAAU,CAAC4B,MAAM,QAAQ3B,UAAU,KAAKC,QAAQ,KAAI3B,SAAA,CAAC,gBACpCkD,MAG7B,E,kFCXYI,EAAoB,WAC7B,OACI/D,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC3B,GAAI8D,EAAAA,SAASvD,UACdT,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAACC,UAAU,KAAKC,QAAQ,KAAI3B,SAAC,qCAKpD,ECqBA,EApBqB,WACjB,IAAMwD,GAAYhD,EAAAA,EAAAA,IAAYiD,EAAAA,IACxBP,GAAQ1C,EAAAA,EAAAA,IAAY2C,EAAAA,IACpB5C,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE9B,OACIL,EAAAA,EAAAA,MAACsD,EAAAA,EAAS,CAAChC,UAAU,OAAOiC,SAAS,KAAKlE,IAAImE,EAAAA,EAAAA,IAAuBC,GAAO7D,SAAA,EACxET,EAAAA,EAAAA,KAACuE,EAAAA,GAAW,KACZ1D,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CAAC3B,GAAIsE,EAAAA,GAAiB/D,SAAA,EACtBT,EAAAA,EAAAA,KAACyE,EAAAA,EAAW,KACZzE,EAAAA,EAAAA,KAACyC,EAAM,IACNkB,GAAQ3D,EAAAA,EAAAA,KAAC0D,EAAK,KAAM1D,EAAAA,EAAAA,KAACe,EAAY,IACZ,IAArBC,EAAU0D,SAAiBf,IAAUM,IAClCjE,EAAAA,EAAAA,KAAC+D,EAAiB,SAKtC,C","sources":["components/ContactsList/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/Error/Error.jsx","components/EmptyContactsList/EmptyContactsList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { ListItem, IconButton, ListItemButton, ListItemText } from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useDispatch } from \"react-redux\";\nimport { delContactThunk } from \"api/fetchContacts\";\nimport { useState } from \"react\";\nimport { SpinerDel } from \"components/Loader/Loader\";\nimport { listItemStyle } from \"./StyleContactsList\";\n\n\nexport const ContactItem = ({ contact }) => {\n    const [load, setLoad] = useState(false);\n    const { id, name, number } = contact;\n    const dispatch = useDispatch();\n\n    const deleteContact = (contactId) => {\n        setLoad(true);\n        dispatch(delContactThunk(contactId))\n    };\n\n    return (\n        <ListItem key={id} sx={listItemStyle} secondaryAction={\n            <IconButton onClick={() => deleteContact(id)} aria-label=\"delete\">\n                {load ? <SpinerDel/> : <DeleteIcon />}\n            </IconButton>}>\n            <ListItemButton>\n                <ListItemText>{name}: {number}</ListItemText>\n            </ListItemButton>\n        </ListItem>\n    )\n};","import { selectFilter } from \"redux/filterSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectPhoneBookValue } from \"redux/phoneBook/phoneSelector\";\nimport { getContactsThunk } from \"api/fetchContacts\";\nimport { useEffect, useState } from \"react\";\nimport * as React from 'react';\nimport { Box, List, Typography, Avatar } from \"@mui/material\";\nimport ImportContactsIcon from '@mui/icons-material/ImportContacts';\nimport { Loader } from \"components/Loader/Loader\";\nimport { ContactItem } from \"./ContactItem\";\nimport { avatarStyle } from \"pages/StylePages\";\nimport { boxListStyle } from \"./StyleContactsList\";\n\nexport const ContactsList = () => {\n    const dispatch = useDispatch();\n    const [load, setLoad] = useState(true);\n    const phoneBook = useSelector(selectPhoneBookValue);\n    const filterPhoneBook = useSelector(selectFilter);\n\n    useEffect(() => {\n        setLoad(false);\n    }, [])\n\n    useEffect(() => {\n        dispatch(getContactsThunk())\n    }, [dispatch]);\n\n    const lowerFilter = filterPhoneBook.toLowerCase().trim();\n    const visibleContacts = phoneBook.filter(({ name }) =>\n        (name.toLowerCase().includes(lowerFilter)));\n    \n    return (\n        <Box sx={boxListStyle}>\n            <Avatar sx={avatarStyle}>\n                <ImportContactsIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Your Contacts\n            </Typography>\n            {load && <Loader/>}\n            <List sx={{ width: 396 }}>\n                {visibleContacts.map((contact) =>\n                    <ContactItem contact={contact} key={contact.id} />\n                )}\n            </List>\n        </Box>\n    );\n};","import * as React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { filterSet, selectFilter } from \"redux/filterSlice\";\nimport { Avatar, TextField, Box } from '@mui/material';\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\nimport { avatarStyle } from 'pages/StylePages';\nimport { boxFilterStyle } from './StyleFilter';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filterPhoneBook = useSelector(selectFilter);\n\n    const onChangeFilter = (event) => {\n        const { value } = event.currentTarget;\n        dispatch(filterSet(value))\n    };\n    \n    return (\n        <Box component=\"div\" sx={boxFilterStyle}>\n            <Avatar sx={avatarStyle}>\n                <PersonSearchIcon />\n            </Avatar>\n            <TextField\n                margin=\"normal\"\n                inputProps={{ inputMode: 'text', pattern: \"^[a-zA-Zа-яА-Я]+(([a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" }} \n                sx={{\n                    width: 324,\n                    bgcolor: 'rgba(208, 224, 241, 0.822)',\n                }}\n                label=\"Find contacts by name:\"\n                type=\"text\"\n                name=\"filter\"\n                value={filterPhoneBook}\n                title=\"Enter the name\"\n                onChange={onChangeFilter}\n            />\n        </Box>\n    );\n};","import { useSelector } from \"react-redux\";\nimport { selectError } from \"redux/phoneBook/phoneSelector\";\nimport { Box, Typography } from \"@mui/material\";\nimport { boxErrorStyle } from \"./StyleError\";\n\nexport const Error = () => {\n    const error = useSelector(selectError);\n\n    return (\n        <Box sx={boxErrorStyle}>\n            <Typography color='white' component=\"h2\" variant=\"h5\">\n                We're sorry, {error}\n            </Typography>\n        </Box>\n)};","import { Box, Typography } from '@mui/material';\nimport { boxStyle } from './StyleEmptyContactsList';\n\nexport const EmptyContactsList = () => {\n    return (\n        <Box sx={boxStyle}>\n            <Typography component=\"h1\" variant=\"h5\">\n                You don't have any contacts yet\n            </Typography>\n        </Box >\n    )\n};","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactsList } from \"components/ContactsList/ContactsList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Error } from \"components/Error/Error\";\nimport { useSelector } from \"react-redux\";\nimport { selectError, selectIsLoading, selectPhoneBookValue } from \"redux/phoneBook/phoneSelector\";\nimport { CssBaseline, Container, Box } from '@mui/material';\nimport * as React from 'react';\nimport phone from 'photo/phone.jpg';\nimport { boxContactsStyle, containerContactsStyle } from \"./StylePages\";\nimport { EmptyContactsList } from \"components/EmptyContactsList/EmptyContactsList\";\n\nconst ContactsPage = () => {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const phoneBook = useSelector(selectPhoneBookValue);\n    \n    return (\n        <Container component=\"main\" maxWidth=\"md\" sx={containerContactsStyle(phone)}>\n            <CssBaseline />\n            <Box sx={boxContactsStyle}>\n                <ContactForm />\n                <Filter />\n                {error ? <Error /> : <ContactsList />}\n                {phoneBook.length === 0 && !error && !isLoading &&\n                    <EmptyContactsList />\n                }\n            </Box>\n        </Container>\n    )\n};\n\nexport default ContactsPage;"],"names":["ContactItem","_ref","contact","_useState","useState","_useState2","_slicedToArray","load","setLoad","id","name","number","dispatch","useDispatch","_jsx","ListItem","sx","listItemStyle","secondaryAction","IconButton","onClick","contactId","delContactThunk","children","SpinerDel","DeleteIcon","ListItemButton","_jsxs","ListItemText","ContactsList","phoneBook","useSelector","selectPhoneBookValue","filterPhoneBook","selectFilter","useEffect","getContactsThunk","lowerFilter","toLowerCase","trim","visibleContacts","filter","includes","Box","boxListStyle","Avatar","avatarStyle","ImportContactsIcon","Typography","component","variant","Loader","List","width","map","Filter","boxFilterStyle","PersonSearchIcon","TextField","margin","inputProps","inputMode","pattern","bgcolor","label","type","value","title","onChange","event","currentTarget","filterSet","Error","error","selectError","boxErrorStyle","color","EmptyContactsList","boxStyle","isLoading","selectIsLoading","Container","maxWidth","containerContactsStyle","phone","CssBaseline","boxContactsStyle","ContactForm","length"],"sourceRoot":""}